<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~   WSO2 Inc. licenses this file to you under the Apache License,
  ~   Version 2.0 (the "License"); you may not use this file except
  ~   in compliance with the License.
  ~   You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing,
  ~  software distributed under the License is distributed on an
  ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~  KIND, either express or implied.  See the License for the
  ~  specific language governing permissions and limitations
  ~  under the License.
  -->
<!-- Method Documentation URL: https://msdn.microsoft.com/en-us/library/azure/dn645542.aspx -->
<template name="getAccessTokenFromAuthorizationCode" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="authorizationCode"
               description="Authorization code to be used to obtain the access token."/>
    <parameter name="redirectUrl"
               description="Specifies the reply URL of the application. The value must match the value of the redirect_uri parameter in the authorization code request."/>
    <parameter name="resource" description="The App ID URI of the web API. Optional."/>
    <sequence>
        <property name="uri.var.authorizationCode" expression="$func:authorizationCode"/>
        <property name="uri.var.resource" expression="$func:resource"/>
        <property name="uri.var.redirectUrl" expression="$func:redirectUrl"/>
        <!-- If the user sends the redirectUrl it will be used, else it'll be fetched from the registry. -->
        <filter source="boolean(get-property('uri.var.redirectUrl'))" regex="false">
            <then>
                <property name="uri.var.redirectUrl"
                          expression="get-property('registry', 'connectors/PowerBI/redirectUrl')"/>
            </then>
        </filter>
        <property name="uri.var.clientId"
                  expression="get-property('registry', 'connectors/PowerBI/clientId')"/>
        <property name="uri.var.clientSecret"
                  expression="get-property('registry', 'connectors/PowerBI/clientSecret')"/>
        <!-- Type of the grant used to get a new access token by negotiating the refresh token. -->
        <property name="uri.var.grantType" value="authorization_code"/>
        <script language="js">
            <![CDATA[
         var authorizationCode = mc.getProperty('uri.var.authorizationCode');
         var grantType = mc.getProperty('uri.var.grantType');
         var clientSecret = mc.getProperty('uri.var.clientSecret');
         var clientId = mc.getProperty('uri.var.clientId');
         var resource = mc.getProperty('uri.var.resource');
         var redirectUri = mc.getProperty('uri.var.redirectUrl');
         var requestQuery = "code=" + encodeURIComponent(authorizationCode) + "&grant_type=" + encodeURIComponent(grantType)
            + "&redirect_uri=" + encodeURIComponent(redirectUri) + "&client_secret=" + encodeURIComponent(clientSecret)
            + "&client_id=" + encodeURIComponent(clientId) + "&resource=" + encodeURIComponent(resource);
         mc.setProperty('uri.var.requestQuery',requestQuery.toString());
      ]]>
        </script>
        <property name="uri.var.requestQuery" expression="get-property('uri.var.requestQuery')"/>
        <property name="uri.var.authApiUrl"
                  value="https://login.microsoftonline.com/common/oauth2/token"/>
        <!-- Calling java class to retrieve access token through authorization code. -->
        <class name="org.wso2.carbon.connector.powerbi.auth.PowerBIAccessTokenGenerator"/>
        <script language="js">
            <![CDATA[
         mc.setPayloadJSON(mc.getProperty('uri.var.resultObject'));
      ]]>
        </script>
        <!-- Setting the access token and refresh token to the property. -->
        <property name="uri.var.accessToken" expression="json-eval($.map.access_token)"/>
        <property name="uri.var.refreshToken" expression="json-eval($.map.refresh_token)"/>
        <script language="js">
            <![CDATA[
             importPackage(Packages.org.apache.synapse.config);
             var newAccessToken = mc.getProperty('uri.var.accessToken');
             if(newAccessToken != null && newAccessToken != ''){
                var existingAccessToken = mc.getConfiguration().getRegistry().getResource("connectors/PowerBI/accessToken");
                if(existingAccessToken == null){
                  // Create the registry entry if no such entry exists.
                  mc.getConfiguration().getRegistry().newResource("connectors/PowerBI/accessToken", newAccessToken);
                } else {
                  // Update the registry entry if it already exists.
                  mc.getConfiguration().getRegistry().updateResource("connectors/PowerBI/accessToken", newAccessToken);
                }
             }
             var newRefreshToken = mc.getProperty('uri.var.refreshToken');
             if(newRefreshToken != null && newRefreshToken != ''){
                var existingRefreshToken = mc.getConfiguration().getRegistry().getResource("connectors/PowerBI/refreshToken");
                if(existingRefreshToken == null){
                  // Create the registry entry if no such entry exists.
                  mc.getConfiguration().getRegistry().newResource("connectors/PowerBI/refreshToken", newRefreshToken);
                } else {
                  // Update the registry entry if it already exists.
                  mc.getConfiguration().getRegistry().updateResource("connectors/PowerBI/refreshToken", newRefreshToken);
                }
             }
         ]]>
        </script>
        <!-- Remove custom Headers from the API Response -->
        <header name="P3P" action="remove" scope="transport"/>
        <header name="Pragma" action="remove" scope="transport"/>
        <header name="Server" action="remove" scope="transport"/>
        <header name="Strict-Transport-Security" action="remove" scope="transport"/>
        <header name="X-Content-Type-Options" action="remove" scope="transport"/>
        <header name="X-Powered-By" action="remove" scope="transport"/>
        <header name="client-request-id" action="remove" scope="transport"/>
        <header name="x-ms-gateway-service-instanceid" action="remove" scope="transport"/>
        <header name="x-ms-request-id" action="remove" scope="transport"/>
    </sequence>
</template>